<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Agente S</title>
  <style>
    body {
      font-family: sans-serif;
      background: #121212;
      color: #f0f0f0;
      margin: 0;
      padding: 1rem;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }

    #mensagens {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
      border: 1px solid #333;
      border-radius: 8px;
      background: #1e1e1e;
      margin-bottom: 1rem;
    }

    .msg-user {
      text-align: right;
      margin: 0.5rem 0;
      color: #a1d6ff;
    }

    .msg-bot {
      text-align: left;
      margin: 0.5rem 0;
      color: #ffd580;
    }

    #input-area {
      display: flex;
      gap: 0.5rem;
    }

    input, button {
      padding: 0.5rem;
      font-size: 1rem;
    }

    input {
      flex: 1;
      border: 1px solid #444;
      border-radius: 4px;
      background: #222;
      color: #f0f0f0;
    }

    button {
      background: #333;
      color: #fff;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }

    button:hover {
      background: #555;
    }
  </style>
</head>
<body onload="carregarHistorico()">
    <h1>Agente S</h1>
    <div id="mensagens"></div>

    <div id="input-area">
        <input id="prompt" type="text" placeholder="Digite sua mensagem..." />
        <button onclick="enviarPrompt()">Enviar</button>
        <button onclick="limparHistorico()">üßπ</button>
    </div>

    <script>
        async function carregarHistorico() {
            const token = localStorage.getItem("Mail-Token");
            if (!token) { window.location.href = "login"; return; }

            const container = document.getElementById("mensagens");
            container.innerHTML = "";

            try {
                const res = await fetch("/api/agent/history", { method: "GET", headers: { "Authorization": token } });
                if (!res.ok) { Swal.fire('Erro', 'Erro ao carregar historico.', 'error'); }

                const data = await res.json();

                if (Array.isArray(data.response)) {
                    data.response.forEach(m => {
                        const msg = document.createElement("div");
                        msg.className = m.role === "user" ? "msg-user" : "msg-bot";
                        msg.textContent = m.content;
                        container.appendChild(msg);
                    });
                } else {
                    const msg = document.createElement("div");
                    msg.className = "msg-bot";
                    msg.textContent = data.response || "Erro ao carregar historico.";
                    container.appendChild(msg);
                }

                container.scrollTop = container.scrollHeight;

            } catch (e) { container.innerHTML = "<div class='msg-bot'>Erro ao carregar hist√≥rico.</div>";  }
        }

        async function enviarPrompt() {
            const token = localStorage.getItem("Mail-Token");
            if (!token) { window.location.href = "login"; return; }

            const prompt = document.getElementById("prompt").value.trim();
            if (!prompt) { return; }
            
            document.getElementById("prompt").value = "";

            try {
                const res = await fetch("/api/agent", { method: "POST", headers: { "Content-Type": "application/json", "Authorization": token }, body: JSON.stringify({ prompt }) });
                if (!res.ok) { Swal.fire('Erro', 'Erro ao enviar mensagem.', 'error'); }

                const data = await res.json();
                const container = document.getElementById("mensagens");

                const userMsg = document.createElement("div");
                userMsg.className = "msg-user";
                userMsg.textContent = prompt;
                container.appendChild(userMsg);
            
                const botMsg = document.createElement("div");
                botMsg.className = "msg-bot";
                botMsg.textContent = data.response || "Nenhuma resposta recebida.";
                container.appendChild(botMsg);
            
                container.scrollTop = container.scrollHeight;
            } catch (e) { container.innerHTML = "<div class='msg-bot'>Falha na comunica√ß√£o.</div>";  }}
        }

        async function limparHistorico() {
            const token = localStorage.getItem("Mail-Token");
            if (!token) { window.location.href = "login"; return; }

            try { 
                const res = await fetch("/api/agent/forget", { method: "POST", headers: { "Authorization": token } });

                if (!res.ok) { Swal.fire('Erro', 'Erro ao limpar hist√≥rico.', 'error'); return; }

                carregarHistorico();

            } catch (e) { Swal.fire('Erro', 'Erro ao limpar hist√≥rico.', 'error'); } 
        }

    </script>
</body>
</html>
